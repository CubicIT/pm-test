package com.pavan.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.pavan.model.EmpIoyeeInfoBO;
import com.pavan.model.ClientBO;
import com.pavan.service.ClientService;

@Controller
public class ClientController {
	@Autowired
	private ClientService clientService;

	@RequestMapping(value = "")
	public String index() {
		return "index";
	}

	@RequestMapping(value = "/clients", method = RequestMethod.GET)
	public ModelAndView clients() {
		ModelAndView mv = new ModelAndView();
		//mv.addObject("client", new ClientBO());
		mv.addObject("clients", this.clientService.listClients());
		mv.setViewName("client");
		return mv;
	}

	@RequestMapping("/client/showEmpPopup")
	public ModelAndView showEmpPopup() {
		ModelAndView mv = new ModelAndView();
		mv.addObject("client", new ClientBO());
		mv.addObject("clients", this.clientService.listClients());
		mv.setViewName("clientPopUp");
		return mv;
	}

	@RequestMapping(value = "/client/add", method = RequestMethod.POST)
	@ResponseBody
	public String addClient(@ModelAttribute("client") ClientBO client,
			@RequestParam(value = "managerId", required = false, defaultValue = "0") int managerId) {
		String message = "";
		if (managerId != 0) {
			client.setManager(clientService.getClientById(managerId));
		}
		if (client.getId() == 0) {
			this.clientService.addClient(client);
			message = client.getFirstName() + " " + client.getLastName() + " saved successfully.";
		} else {
			this.clientService.updateClient(client);
			message = client.getFirstName() + " " + client.getLastName() + " updated successfully.";
		}
		return message;
	}

	@RequestMapping("/client/update/{id}")
	public ModelAndView updateClient(@PathVariable("id") int id) {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("clientPopUp");
		ClientBO emp = this.clientService.getClientById(id);
		mv.addObject("client", emp);
		mv.addObject("clients", this.clientService.listClients());
		return mv;
	}

	@RequestMapping("/client/delete/{id}")
	public String deleteClient(@PathVariable("id") int id) {
		this.clientService.deleteClient(id);
		return "redirect:/clients";
	}

	@RequestMapping("/client/showEmpInfoPopup")
	public ModelAndView showEmpInfoPopup(
			@RequestParam(value = "clientId", required = false, defaultValue = "0") int clientId) {
		ModelAndView mv = new ModelAndView();
		ClientBO emp = null;
		if (clientId != 0) {
			emp = this.clientService.getClientById(clientId);
			mv.addObject("client", emp);
		}
		if (emp != null && emp.getEmpInfo() != null && emp.getEmpInfo().getId() > 0) {
			mv.addObject("empInfo", emp.getEmpInfo());
		} else {
			mv.addObject("empInfo", new EmpIoyeeInfoBO());
		}
		mv.setViewName("clientInfoPopUp");
		return mv;
	}

	@RequestMapping(value = "/client/info/add", method = RequestMethod.POST)
	@ResponseBody
	public String addClientInfo(EmpIoyeeInfoBO empInfo,
			@RequestParam(value = "clientId", required = false, defaultValue = "0") int clientId) {
		String message = "";
		ClientBO client = this.clientService.getClientById(clientId);
		client.setEmpInfo(empInfo);
		this.clientService.updateClient(client);
		message = client.getFirstName() + " " + client.getLastName() + " profile saved successfully.";
		return message;
	}
}